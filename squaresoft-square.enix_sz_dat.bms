# SquareSoft/Square Enix - .dat(/.sz) movie format
# almost all variations supported at the moment, although this script still has a long way to go

open FDDE "dat" 0
open FDDE "sz" 1 EXISTS

get DAT_SIZE asize
get NAME basename

if EXISTS != 0
	math dat_chunk_offset = 0
	getdstring intra_quantizer 0x40 1
	getdstring non_intra_quantizer 0x40 1
	log MEMORY_FILE 0 0
	for i = 0
		putarray 0 0 dat_chunk_offset
		get dat_chunk_size long 1
		if dat_chunk_size = 0
			break
		else
			log MEMORY_FILE dat_chunk_offset dat_chunk_size 0
			math dat_chunk_position = 0
			do
				math sound_type = 0
				goto dat_chunk_position MEMORY_FILE
				get chunk_track_info_01 long MEMORY_FILE
				get chunk_track_info_02 long MEMORY_FILE
				get chunk_track_info_03 long MEMORY_FILE
				get chunk_track_info_04 long MEMORY_FILE
				savepos raw_track_offset_within_chunk MEMORY_FILE
				math dat_chunk_position + 0x10
				if chunk_track_info_01 == 0x51
					math sound_type = 3
					callfunction sound_handle 1
					math dat_chunk_position + chunk_track_info_03
				elif chunk_track_info_01 == 0x40
					math sound_type = 2
					callfunction sound_handle 1
					math dat_chunk_position + chunk_track_info_03
				else
					if chunk_track_info_01 == chunk_track_info_02
					if chunk_track_info_02 == chunk_track_info_03
					if chunk_track_info_03 == chunk_track_info_04
						if chunk_track_info_01 != 0
							math sound_type = 1
						endif
					endif
					endif
					endif
					if sound_type != 0
						callfunction sound_handle 1
					endif
					math dat_chunk_position + chunk_track_info_01
				endif
			while dat_chunk_position < dat_chunk_size
			math dat_chunk_offset + dat_chunk_size
			log MEMORY_FILE 0 0
		endif
	next i
	startfunction sound_handle
		print " handling sound type number %sound_type% "
		if sound_type = 1
			math is_vag = 0
			math is_pcm = 0
			math is_pcm_and_ac3 = 0
			math bilingual = 0
			# PS-ADPCM/VAG-like audio codec with 16 extra bytes each chunk
			if chunk_track_info_01 == 0x1c30
				math is_vag = 1
				math vag_chunksize = chunk_track_info_01
			endif
			# individual PCM16 chunks
			if chunk_track_info_01 == 0x3c00
				math is_pcm = 1
				math pcm_chunksize = chunk_track_info_01
			endif
			if chunk_track_info_01 == 0x6400
				math is_pcm = 1
				math pcm_chunksize = chunk_track_info_01
			endif
			if chunk_track_info_01 == 0x7800
				math is_pcm = 1
				math bilingual = 1
				math pcm_chunksize = chunk_track_info_01
			endif
			if chunk_track_info_01 == 0xc800
				math is_pcm = 1
				math bilingual = 1
				math pcm_chunksize = chunk_track_info_01
			endif
			# PCM16+AC-3 chunks
			if chunk_track_info_01 == 0x5110
				math is_pcm_and_ac3 = 1
				math pcm_chunksize = 0x3c00
				math ac3_chunksize = 0x1510
			endif
			if chunk_track_info_01 == 0x8000
				math is_pcm_and_ac3 = 1
				math pcm_chunksize = 0x6400
				math ac3_chunksize = 0x1c00
			endif
			if chunk_track_info_01 == 0x8400
				math is_pcm_and_ac3 = 1
				math pcm_chunksize = 0x6400
				math ac3_chunksize = 0x2000
			endif
			if chunk_track_info_01 == 0x8700
				math is_pcm_and_ac3 = 1
				math pcm_chunksize = 0x6400
				math ac3_chunksize = 0x2300
			endif
			if chunk_track_info_01 == 0xa220
				math is_pcm_and_ac3 = 1
				math bilingual = 1
				math pcm_chunksize = 0x7800
				math ac3_chunksize = 0x2a20
			endif
			if chunk_track_info_01 == 0x10800
				math is_pcm_and_ac3 = 1
				math bilingual = 1
				math pcm_chunksize = 0xc800
				math ac3_chunksize = 0x4000
			endif
			if is_vag = 1
				append
				if bilingual = 0
					string adpcm_name p "%s.vag" NAME
					log adpcm_name raw_track_offset_within_chunk vag_chunksize MEMORY_FILE
				elif bilingual = 1
					print " \n VAG chunk with two or more language tracks in its hands? \n what, do you want me to handle that!? "
				endif
				append
			endif
			if is_pcm = 1
				append
				if bilingual = 0
					string pcm_name p "%s.pcm" NAME
					log pcm_name raw_track_offset_within_chunk pcm_chunksize MEMORY_FILE
				elif bilingual = 1
					xmath pcm_chunksize_per_language "pcm_chunksize >> 1"
					math pcm_language_track_offset_within_chunk = raw_track_offset_within_chunk
					for language = 0 < 2
						xmath language2 "language + 1"
						string pcm_name p "[%02d]%s.pcm" language2 NAME
						log pcm_name pcm_language_track_offset_within_chunk pcm_chunksize_per_language MEMORY_FILE
						math pcm_language_track_offset_within_chunk + pcm_chunksize_per_language
					next language
				endif
				append
			endif
			if is_pcm_and_ac3 = 1
				append
				if bilingual = 0
					string pcm_name p "%s.pcm" NAME
					log pcm_name raw_track_offset_within_chunk pcm_chunksize MEMORY_FILE
					string ac3_name p "%s.ac3" NAME
					xmath ac3_offset "pcm_chunksize + raw_track_offset_within_chunk"
					log ac3_name ac3_offset ac3_chunksize MEMORY_FILE
				elif bilingual = 1
					xmath pcm_chunksize_per_language "pcm_chunksize >> 1"
					math pcm_language_track_offset_within_chunk = raw_track_offset_within_chunk
					for language = 0 < 2
						xmath language2 "language + 1"
						string pcm_name p "[%02d]%s.pcm" language2 NAME
						putarray 1 language pcm_name
						putarray 3 language pcm_language_track_offset_within_chunk
						math pcm_language_track_offset_within_chunk + pcm_chunksize_per_language
					next language
					xmath ac3_chunksize_per_language "ac3_chunksize >> 1"
					math ac3_language_track_offset_within_chunk = pcm_language_track_offset_within_chunk
					for language = 0 < 2
						xmath language2 "language + 1"
						string ac3_name p "[%02d]%s.ac3" language2 NAME
						putarray 2 language ac3_name
						putarray 4 language ac3_language_track_offset_within_chunk
						math ac3_language_track_offset_within_chunk + ac3_chunksize_per_language
					next language
					for language = 0 < 2
						getarray pcm_name 1 language
						getarray ac3_name 2 language
						getarray pcm_language_track_offset_within_chunk 3 language
						getarray ac3_language_track_offset_within_chunk 4 language
						log pcm_name pcm_language_track_offset_within_chunk pcm_chunksize_per_language MEMORY_FILE
						log ac3_name ac3_language_track_offset_within_chunk ac3_chunksize_per_language MEMORY_FILE
					next language
				endif
				append
			endif
		elif sound_type = 2
			append
			string pcm_name p "%s.upcm" NAME
			log pcm_name raw_track_offset_within_chunk chunk_track_info_02 MEMORY_FILE
			xmath ac3_offset "(chunk_track_info_03 - chunk_track_info_04) + raw_track_offset_within_chunk"
			string ac3_name p "%s.ac3" NAME
			log ac3_name ac3_offset chunk_track_info_04 MEMORY_FILE
			append
		elif sound_type = 3
			log MEMORY_FILE2 raw_track_offset_within_chunk chunk_track_info_03 MEMORY_FILE
			callfunction process_compressed_audio_chunk 1
			append
			if decompressed_size == chunk_track_info_02
				string pcm_name p "%s.upcm" NAME
				log pcm_name 0 chunk_track_info_02 MEMORY_FILE3
				log MEMORY_FILE3 0 0
				xmath ac3_offset "(chunk_track_info_03 - chunk_track_info_04) + raw_track_offset_within_chunk"
				string ac3_name p "%s.ac3" NAME
				log ac3_name ac3_offset chunk_track_info_04 MEMORY_FILE
			endif
			append
		endif
	endfunction
	startfunction process_compressed_audio_chunk
		get compression_level byte MEMORY_FILE2
		if compression_level >= 1 && compression_level <= 2
		endif
		get original_size long MEMORY_FILE2
		log MEMORY_FILE3 0 0
		math bytes_written = 0
		xmath full_size "chunk_track_info_03 - chunk_track_info_04"
		do
			get control_byte byte MEMORY_FILE2
			if control_byte <= 0x7d
				for j = 0 < control_byte
					goto bytes_written MEMORY_FILE3
					get bytes_to_write byte MEMORY_FILE2
					put bytes_to_write byte MEMORY_FILE3
					math bytes_written + 1
				next j
			elif control_byte == 0x7e
				get bytes_to_write byte MEMORY_FILE2
				math bytes_to_write + 4
				get source_byte_to_write byte MEMORY_FILE2
				for j = 0 < bytes_to_write
					goto bytes_written MEMORY_FILE3
					put source_byte_to_write byte MEMORY_FILE3
					math bytes_written + 1
				next j
			elif control_byte == 0x7f
				get bytes_to_write short MEMORY_FILE2
				get source_byte_to_write byte MEMORY_FILE2
				for j = 0 < bytes_to_write
					goto bytes_written MEMORY_FILE3
					put source_byte_to_write byte MEMORY_FILE3
					math bytes_written + 1
				next j
			elif control_byte >= 0x80
				xmath additional_control_byte_01 "((control_byte & 0x7f) >> 3) + 3"
				if compression_level == 2
					if additional_control_byte_01 >= 5
						xmath additional_control_byte_03 "((additional_control_byte_01 - 5) >> 1) + 1"
						math additional_control_byte_01 - additional_control_byte_03
					endif
				endif
				if compression_level == 1
					xmath additional_control_byte_02 "control_byte & 0x07"
				elif compression_level == 2
					xmath additional_control_byte_02 "control_byte & 0x0f"
				endif
				if additional_control_byte_02 >= 0x08
					math additional_control_byte_01 - 1
				endif
				get previous_bytes byte MEMORY_FILE2
				if additional_control_byte_02 == 0
					xmath byte_recovery_position "(bytes_written - previous_bytes) - 1"
				else
					xmath byte_recovery_position "(bytes_written - previous_bytes) - ((additional_control_byte_02 << 8) + 1)"
				endif
				for j = 0 < additional_control_byte_01
					if byte_recovery_position >= 0
						goto byte_recovery_position MEMORY_FILE3
						get recurring_bytes byte MEMORY_FILE3
					else
						math recurring_bytes = 0
					endif
					goto bytes_written MEMORY_FILE3
					put recurring_bytes byte MEMORY_FILE3
					math bytes_written + 1
					math byte_recovery_position + 1
				next j
			endif
			savepos current_position MEMORY_FILE2
		while current_position < full_size
		get decompressed_size asize MEMORY_FILE3
		log MEMORY_FILE2 0 0
	endfunction
else
	/*
	# "single" .DAT movies(Driving Emotion Type-S, Final Fantasy XI(PS2), Front Mission 5)
	putvarchr MEMORY_FILE2 DAT_SIZE 0
	putvarchr MEMORY_FILE3 DAT_SIZE 0
	log MEMORY_FILE2 0 0
	log MEMORY_FILE3 0 0
	set EXTRACT_AUDIO2 0
	# set this to 1 for extracting any kind of audio data in there
	get DUMMY01 long
	get DUMMY02 long
	get DUMMY03 long
	get DUMMY04 long
	get DUMMY05 long
	get DUMMY06 long
	get DUMMY07 long
	get DUMMY08 long
	get DUMMY09 long
	if DUMMY09 == 2 || DUMMY09 == 4
		# multiplexed .DAT format - type 2(video/audio)
		goto 0
		savepos OFFSET2
		do
			goto OFFSET2
			get ID long
			get SIZE1 long
			get SIZE2 long
			get SIZE3 long
			if DUMMY09 == 4
				getdstring DUMMY10 0x10 # \xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff
			endif
			savepos CHUNK_OFFSET2
			append
			# there are at least 4 ID values in this type of format:
			# 0x1 - ???
			# 0x2 - ???
			# 0x3 - MPEG2 video data
			# 0x4 - audio data
			# 0x5 - ???
			# 0x6 - ???
			
			# you can't actually uncomment both of these conditions, otherwise the script would handle both of them
			# and the output file would be two things meshed together into one without any accompanying info
			# around them whatsoever.
			# if anything you can just comment one of those "ID" conditions to a part of them by using just these two symbols(/*, */),
			# maybe you can extract something you want that way.
			if ID == 4 # this ID has another "ID" in which it indicates which audio format is this used on
				if EXTRACT_AUDIO2 == 0
					if SIZE3 == 0xffffffff
						if SIZE2 & 0xffffff00
							log MEMORY_FILE CHUNK_OFFSET2 SIZE1
						endif
					else
						log MEMORY_FILE CHUNK_OFFSET2 SIZE3
					endif
					string FNAME p= "%s_%02x.bin" NAME ID
					math FINAL_EXTRACTION == 0
				elif EXTRACT_AUDIO2 == 1
					if SIZE2 == 0xffffff00
						string FNAME p "%s.pcm" NAME
						log FNAME CHUNK_OFFSET2 SIZE1
					elif SIZE2 == 0xffffff01
						string FNAME p "%s.ac3" NAME
						log FNAME CHUNK_OFFSET2 SIZE1
					elif SIZE2 == 0xffffff03
						string FNAME p "%s.vsf" NAME
						log FNAME CHUNK_OFFSET2 SIZE3
						# SIZE3 is used instead for "VSF" files, otherwise the result will have blank space all over the place and the file will play nothing but glitchy audio on vgmstream
					endif
					#math FINAL_EXTRACTION == 4
				endif
			endif
			
			append
			savepos OFFSET2
			
			# these 0x5/0x6 ID values are just excuses to skip irrelevant data
			# so we do exactly that right now
			if SIZE1 == 1
				math SIZE1 == 0
			elif SIZE1 == 0xffffffff
				math SIZE1 == 0
			endif
			
			# to make sure the script doesn't spazz out when handling MPEG2 chunks
			if ID == 3
				math OFFSET2 += SIZE2
			else
				math OFFSET2 += SIZE1
			endif
		while OFFSET2 < DAT_SIZE
	else
		# multiplexed .DAT format - type 1(video)
		savepos OFFSET2
		do
			goto OFFSET2
			get CHUNK_SIZE2 long
			get INDICATOR long
			if INDICATOR != 0xffffffff
				savepos CHUNK_OFFSET2
			else
				savepos REAL_POS
				if REAL_POS u>= DAT_SIZE
					break
				else
					get INDICATOR2 long
					savepos CHUNK_OFFSET2
				endif
			endif
			if CHUNK_SIZE2 == 0
				# MPEG2 video(no way to decode it at the moment)
				string FNAME p= "%s_video.bin" NAME
			elif CHUNK_SIZE2 == 3
				# MPEG2 video(no way to decode it at the moment)
				goto -8 0 SEEK_CUR
				get DUMMY10 long
				get DUMMY11 long
				get CHUNK_SIZE2 long
				get DUMMY12 long
				savepos CHUNK_OFFSET2
				string FNAME p= "%s_0x%08x.bin" NAME DUMMY12
			endif
			append
			log MEMORY_FILE CHUNK_OFFSET2 CHUNK_SIZE2
			math FINAL_EXTRACTION == 0
			append
			savepos OFFSET2
			math OFFSET2 += CHUNK_SIZE2
		while OFFSET2 < DAT_SIZE
	endif
	*/
endif
