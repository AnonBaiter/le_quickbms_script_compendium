# SQUARESOFT->SQUARE ENIX - .dat(/.sz) movie format
# ---
# Driving Emotion Type-S (PS2) - .sz/.dat(OP_MOVIE), .dat
# Gekikukan Pro Yakyuu AT THE END OF THE CENTURY 1999 (PS2) - .sz/dat
# Bouncer/The Bouncer (PS2) - .sz/dat
# Final Fantasy X (PS2) - .sz/.dat
# Kingdom Hearts (PS2) - .dat
# Final Fantasy XI (PS2) - .dat

open FDDE "dat" 0
open FDDE "sz" 1 EXISTS

get DAT_SIZE asize
get NAME basename

if EXISTS != 0
	# "paired" .sz/.dat movies
	# exclusive to this script is a method to check if .sz already has an established intra/non-intra quantizer in its header or not.
	# to do so, we have to do some counter-intuitive stuff just like this.
	# --- quantizer array number one ---
	putarray 0 0 0x20
	putarray 0 1 0x20
	putarray 0 2 0x20
	putarray 0 3 0x20
	putarray 0 4 0x20
	putarray 0 5 0x20
	putarray 0 6 0x20
	putarray 0 7 0x20
	putarray 0 8 0x20
	putarray 0 9 0x20
	putarray 0 10 0x20
	putarray 0 11 0x20
	putarray 0 12 0x20
	putarray 0 13 0x20
	putarray 0 14 0x20
	putarray 0 15 0x20
	putarray 0 16 0x20
	putarray 0 17 0x20
	putarray 0 18 0x20
	putarray 0 19 0x20
	putarray 0 20 0x20
	putarray 0 21 0x20
	putarray 0 22 0x20
	putarray 0 23 0x20
	putarray 0 24 0x20
	putarray 0 25 0x20
	putarray 0 26 0x20
	putarray 0 27 0x20
	putarray 0 28 0x20
	putarray 0 29 0x20
	putarray 0 30 0x20
	putarray 0 31 0x20
	putarray 0 32 0x20
	putarray 0 33 0x20
	putarray 0 34 0x20
	putarray 0 35 0x20
	putarray 0 36 0x20
	putarray 0 37 0x20
	putarray 0 38 0x20
	putarray 0 39 0x20
	putarray 0 40 0x20
	putarray 0 41 0x20
	putarray 0 42 0x20
	putarray 0 43 0x20
	putarray 0 44 0x20
	putarray 0 45 0x20
	putarray 0 46 0x20
	putarray 0 47 0x20
	putarray 0 48 0x20
	putarray 0 49 0x20
	putarray 0 50 0x20
	putarray 0 51 0x20
	putarray 0 52 0x20
	putarray 0 53 0x20
	putarray 0 54 0x20
	putarray 0 55 0x20
	putarray 0 56 0x20
	putarray 0 57 0x20
	putarray 0 58 0x20
	putarray 0 59 0x20
	putarray 0 60 0x20
	putarray 0 61 0x20
	putarray 0 62 0x20
	putarray 0 63 0x20
	putarray 0 64 0x10
	putarray 0 65 0x10
	putarray 0 66 0x10
	putarray 0 67 0x10
	putarray 0 68 0x10
	putarray 0 69 0x10
	putarray 0 70 0x10
	putarray 0 71 0x10
	putarray 0 72 0x10
	putarray 0 73 0x10
	putarray 0 74 0x10
	putarray 0 75 0x10
	putarray 0 76 0x10
	putarray 0 77 0x10
	putarray 0 78 0x10
	putarray 0 79 0x10
	putarray 0 80 0x10
	putarray 0 81 0x10
	putarray 0 82 0x10
	putarray 0 83 0x10
	putarray 0 84 0x10
	putarray 0 85 0x10
	putarray 0 86 0x10
	putarray 0 87 0x10
	putarray 0 88 0x10
	putarray 0 89 0x10
	putarray 0 90 0x10
	putarray 0 91 0x10
	putarray 0 92 0x10
	putarray 0 93 0x10
	putarray 0 94 0x10
	putarray 0 95 0x10
	putarray 0 96 0x10
	putarray 0 97 0x10
	putarray 0 98 0x10
	putarray 0 99 0x10
	putarray 0 100 0x10
	putarray 0 101 0x10
	putarray 0 102 0x10
	putarray 0 103 0x10
	putarray 0 104 0x10
	putarray 0 105 0x10
	putarray 0 106 0x10
	putarray 0 107 0x10
	putarray 0 108 0x10
	putarray 0 109 0x10
	putarray 0 110 0x10
	putarray 0 111 0x10
	putarray 0 112 0x10
	putarray 0 113 0x10
	putarray 0 114 0x10
	putarray 0 115 0x10
	putarray 0 116 0x10
	putarray 0 117 0x10
	putarray 0 118 0x10
	putarray 0 119 0x10
	putarray 0 120 0x10
	putarray 0 121 0x10
	putarray 0 122 0x10
	putarray 0 123 0x10
	putarray 0 124 0x10
	putarray 0 125 0x10
	putarray 0 126 0x10
	putarray 0 127 0x10
	# --- quantizer array number two ---
	putarray 1 0 0x08
	putarray 1 1 0x10
	putarray 1 2 0x13
	putarray 1 3 0x16
	putarray 1 4 0x1a
	putarray 1 5 0x1b
	putarray 1 6 0x1d
	putarray 1 7 0x22
	putarray 1 8 0x10
	putarray 1 9 0x10
	putarray 1 10 0x16
	putarray 1 11 0x18
	putarray 1 12 0x1b
	putarray 1 13 0x1d
	putarray 1 14 0x22
	putarray 1 15 0x25
	putarray 1 16 0x13
	putarray 1 17 0x16
	putarray 1 18 0x1a
	putarray 1 19 0x1b
	putarray 1 20 0x1d
	putarray 1 21 0x22
	putarray 1 22 0x22
	putarray 1 23 0x26
	putarray 1 24 0x16
	putarray 1 25 0x16
	putarray 1 26 0x1a
	putarray 1 27 0x1b
	putarray 1 28 0x1d
	putarray 1 29 0x22
	putarray 1 30 0x25
	putarray 1 31 0x28
	putarray 1 32 0x16
	putarray 1 33 0x1a
	putarray 1 34 0x1b
	putarray 1 35 0x1d
	putarray 1 36 0x20
	putarray 1 37 0x23
	putarray 1 38 0x28
	putarray 1 39 0x30
	putarray 1 40 0x1a
	putarray 1 41 0x1b
	putarray 1 42 0x1d
	putarray 1 43 0x20
	putarray 1 44 0x23
	putarray 1 45 0x28
	putarray 1 46 0x30
	putarray 1 47 0x3a
	putarray 1 48 0x1a
	putarray 1 49 0x1b
	putarray 1 50 0x1d
	putarray 1 51 0x22
	putarray 1 52 0x26
	putarray 1 53 0x2e
	putarray 1 54 0x38
	putarray 1 55 0x45
	putarray 1 56 0x1b
	putarray 1 57 0x1d
	putarray 1 58 0x23
	putarray 1 59 0x26
	putarray 1 60 0x2e
	putarray 1 61 0x38
	putarray 1 62 0x45
	putarray 1 63 0x53
	putarray 1 64 0x10
	putarray 1 65 0x11
	putarray 1 66 0x12
	putarray 1 67 0x13
	putarray 1 68 0x14
	putarray 1 69 0x15
	putarray 1 70 0x16
	putarray 1 71 0x17
	putarray 1 72 0x11
	putarray 1 73 0x12
	putarray 1 74 0x13
	putarray 1 75 0x14
	putarray 1 76 0x15
	putarray 1 77 0x16
	putarray 1 78 0x17
	putarray 1 79 0x18
	putarray 1 80 0x12
	putarray 1 81 0x13
	putarray 1 82 0x14
	putarray 1 83 0x15
	putarray 1 84 0x16
	putarray 1 85 0x17
	putarray 1 86 0x18
	putarray 1 87 0x19
	putarray 1 88 0x13
	putarray 1 89 0x14
	putarray 1 90 0x15
	putarray 1 91 0x16
	putarray 1 92 0x17
	putarray 1 93 0x18
	putarray 1 94 0x1a
	putarray 1 95 0x1b
	putarray 1 96 0x14
	putarray 1 97 0x15
	putarray 1 98 0x16
	putarray 1 99 0x17
	putarray 1 100 0x19
	putarray 1 101 0x1a
	putarray 1 102 0x1b
	putarray 1 103 0x1c
	putarray 1 104 0x15
	putarray 1 105 0x16
	putarray 1 106 0x17
	putarray 1 107 0x18
	putarray 1 108 0x1a
	putarray 1 109 0x1b
	putarray 1 110 0x1c
	putarray 1 111 0x1e
	putarray 1 112 0x16
	putarray 1 113 0x17
	putarray 1 114 0x18
	putarray 1 115 0x1a
	putarray 1 116 0x1b
	putarray 1 117 0x1c
	putarray 1 118 0x1e
	putarray 1 119 0x1f
	putarray 1 120 0x17
	putarray 1 121 0x18
	putarray 1 122 0x19
	putarray 1 123 0x1b
	putarray 1 124 0x1c
	putarray 1 125 0x1e
	putarray 1 126 0x1f
	putarray 1 127 0x21
	math no_quant = 0
	math is_match = 0
	goto 0 1
	for try = 0 < 2
		if try = 0
			math byte_hash = 0
			math check_tre = 0
			for bc = 0 < 0x80
				get check byte 1
				math check_dup = check
				math byte_hash + check_dup
				math check_dup << 3
				math check_dup * 45
				math check_tre + check_dup
				math check_tre << 5
				math check_tre / 5
				math byte_hash + check_tre
			next bc
		endif
		math quant_hash = 0
		math match_tre = 0
		for bd = 0 < 0x80
			getarray match try bd
			math match_dup = match
			math quant_hash + match_dup
			math match_dup << 3
			math match_dup * 45
			math match_tre + match_dup
			math match_tre << 5
			math match_tre / 5
			math quant_hash + match_tre
		next bd
		math byte_hash = byte_hash
		math quant_hash = quant_hash
		if byte_hash = quant_hash
			math is_match = 1
			math no_quant = 0
			break
		else
			math no_quant = 1
			math is_match = 0
			goto 0 1
		endif
	next try
	# intra/non-intra quantizer checking ends here.
	if no_quant = 0
		math is_match = 1
			math intra_quantizer_offset = 0
			math non_intra_quantizer_offset = 0x40
			for quantizer = 0 < 0x40
				goto intra_quantizer_offset 1
				get intra_byte byte 1
				math intra_quantizer_offset + 1
				putarray 101 quantizer intra_byte
				goto non_intra_quantizer_offset 1
				get non_intra_byte byte 1
				math non_intra_quantizer_offset + 1
				putarray 102 quantizer non_intra_byte
			next quantizer
		endif
	endif
	log MEMORY_FILE 0 0
	math dat_chunk_offset = 0
	for i = 0
		putarray 0 0 dat_chunk_offset
		get dat_chunk_size long 1
		if dat_chunk_size = 0
			break
		else
			log MEMORY_FILE dat_chunk_offset dat_chunk_size 0
			math dat_chunk_position = 0
			do
				math sound_type = 0
				math chunk_is_zero = 0
				goto dat_chunk_position MEMORY_FILE
				get chunk_track_info_01 long MEMORY_FILE
				get chunk_track_info_02 long MEMORY_FILE
				get chunk_track_info_03 long MEMORY_FILE
				get chunk_track_info_04 long MEMORY_FILE
				savepos raw_track_offset_within_chunk MEMORY_FILE
				math dat_chunk_position + 0x10
				if chunk_track_info_01 == 0x30
					if chunk_track_info_02 == 0xffffffff
					if chunk_track_info_03 == 0xffffffff
					if chunk_track_info_04 == 0xffffffff
						math camera_coordinates_size = chunk_track_info_01
						string camera_coordinates_file_name p "%s.cam" NAME
						log camera_coordinates_file_name raw_track_offset_within_chunk camera_coordinates_size
					endif
					endif
					endif
				elif chunk_track_info_01 == 0x40
					math sound_type = 2
					#callfunction sound_handle 1
					math dat_chunk_position + chunk_track_info_03
				elif chunk_track_info_01 >= 0x50 && chunk_track_info_01 <= 0x51
					math sound_type = 3
					#callfunction sound_handle 1
					math dat_chunk_position + chunk_track_info_03
				else
					if chunk_track_info_01 == chunk_track_info_02
					if chunk_track_info_02 == chunk_track_info_03
					if chunk_track_info_03 == chunk_track_info_04
						if chunk_track_info_01 != 0
							math sound_type = 1
						endif
						if chunk_track_info_01 == 0
							math chunk_is_zero = 1
						endif
					endif
					endif
					endif
					if sound_type == 1
						callfunction sound_handle 1
					else
						if chunk_is_zero == 0
							xmath frame_type "chunk_track_info_03 & 1"
							xmath video_width "((chunk_track_info_03 >> 1) & 0x7ff) + 0xc0"
							xmath video_height "(chunk_track_info_03 >> 20) & 0xfff"
							if frame_type = 0
								print " I-picture frame "
							elif frame_type = 1
								print " P-picture frame"
							endif
							/*
							if video_frame_is_compressed = 0
								log MEMORY_FILE2 dat_chunk_position chunk_track_info_01 MEMORY_FILE
								math base_frame_size = chunk_track_info_01
							else
								math current_frame_size == chunk_track_info_01
								goto 0 MEMORY_FILE2
								log MEMORY_FILE3 0 0
								goto 0 MEMORY_FILE3
								for vc = 0 < current_frame_size
									get control_byte byte MEMORY_FILE
									xmath byte_length "(control_byte >> 4) & 0xf"
									putarray 0 0 byte_length
									xmath cb1 "control_byte & 1"
									putarray 0 0 cb1
									if control_byte != 0
									endif
								next vc
							endif
							*/
						endif
					endif
					math dat_chunk_position + chunk_track_info_01
				endif
			while dat_chunk_position < dat_chunk_size
			math dat_chunk_offset + dat_chunk_size
		endif
	next i

	startfunction sound_handle
		if sound_type = 1
			math is_vag = 0
			math is_pcm = 0
			math is_pcm_and_ac3 = 0
			math bilingual = 0
			# PS-ADPCM/VAG-like audio codec with 16 extra bytes each chunk
			if chunk_track_info_01 == 0x1c30
				math is_vag = 1
				math vag_chunksize = chunk_track_info_01
			endif
			if chunk_track_info_01 == 0x3860
				math is_vag = 1
				math bilingual = 1
				math vag_chunksize_per_language = 0x1c30
			endif
			# individual PCM16 chunks
			if chunk_track_info_01 == 0x3c00
				math is_pcm = 1
				math pcm_chunksize = chunk_track_info_01
			endif
			if chunk_track_info_01 == 0x6400
				math is_pcm = 1
				math pcm_chunksize = chunk_track_info_01
			endif
			if chunk_track_info_01 == 0x7800
				math is_pcm = 1
				math bilingual = 1
				math pcm_chunksize_per_language = 0x3c00
			endif
			if chunk_track_info_01 == 0xc800
				math is_pcm = 1
				math bilingual = 1
				math pcm_chunksize_per_language = 0x6400
			endif
			# PCM16+AC-3 chunks
			if chunk_track_info_01 == 0x5110
				math is_pcm_and_ac3 = 1
				math pcm_chunksize = 0x3c00
				math ac3_chunksize = 0x1510
			endif
			if chunk_track_info_01 == 0x8000
				math is_pcm_and_ac3 = 1
				math pcm_chunksize = 0x6400
				math ac3_chunksize = 0x1c00
			endif
			if chunk_track_info_01 == 0x8400
				math is_pcm_and_ac3 = 1
				math pcm_chunksize = 0x6400
				math ac3_chunksize = 0x2000
			endif
			if chunk_track_info_01 == 0x8700
				math is_pcm_and_ac3 = 1
				math pcm_chunksize = 0x6400
				math ac3_chunksize = 0x2300
			endif
			if chunk_track_info_01 == 0xa220
				math is_pcm_and_ac3 = 1
				math bilingual = 1
				math pcm_chunksize_per_language = 0x3c00
				math ac3_chunksize_per_language = 0x1510
			endif
			if chunk_track_info_01 == 0x10800
				math is_pcm_and_ac3 = 1
				math bilingual = 1
				math pcm_chunksize_per_language = 0x6400
				math ac3_chunksize_per_language = 0x2000
			endif
			if is_vag = 1
				append
				if bilingual = 0
					string vag_name p "%s.vag" NAME
					log vag_name raw_track_offset_within_chunk vag_chunksize MEMORY_FILE
				elif bilingual = 1
					math vag_language_track_offset_within_chunk = raw_track_offset_within_chunk
					for language = 0 < 2
						xmath language2 "language + 1"
						string vag_name p "%s[%02d].vag" NAME language2
						log vag_name vag_language_track_offset_within_chunk vag_chunksize_per_language MEMORY_FILE
						math vag_language_track_offset_within_chunk + vag_chunksize_per_language
					next language
				endif
				append
			endif
			if is_pcm = 1
				append
				if bilingual = 0
					string pcm_name p "%s.pcm" NAME
					log pcm_name raw_track_offset_within_chunk pcm_chunksize MEMORY_FILE
				elif bilingual = 1
					math pcm_language_track_offset_within_chunk = raw_track_offset_within_chunk
					for language = 0 < 2
						xmath language2 "language + 1"
						string pcm_name p "%s[%02d].pcm" NAME language2
						log pcm_name pcm_language_track_offset_within_chunk pcm_chunksize_per_language MEMORY_FILE
						math pcm_language_track_offset_within_chunk + pcm_chunksize_per_language
					next language
				endif
				append
			endif
			if is_pcm_and_ac3 = 1
				append
				if bilingual = 0
					string pcm_name p "%s.pcm" NAME
					log pcm_name raw_track_offset_within_chunk pcm_chunksize MEMORY_FILE
					string ac3_name p "%s.ac3" NAME
					xmath ac3_offset "pcm_chunksize + raw_track_offset_within_chunk"
					xmath ac3_last_offset "(ac3_offset + ac3_chunksize) - 8"
					for
						goto ac3_last_offset MEMORY_FILE
						get zero_byte_01 long MEMORY_FILE
						get zero_byte_02 long MEMORY_FILE
						if zero_byte_02 = 0
							math ac3_chunksize - 4
						else
							break
						endif
						if zero_byte_01 = 0
							math ac3_chunksize - 4
						else
							break
						endif
						math ac3_last_offset - 8
					next
					log ac3_name ac3_offset ac3_chunksize MEMORY_FILE
				elif bilingual = 1
					math pcm_language_track_offset_within_chunk = raw_track_offset_within_chunk
					for language = 0 < 2
						xmath language2 "language + 1"
						string pcm_name p "%s[%02d].pcm" NAME language2
						putarray 1 language pcm_name
						putarray 3 language pcm_language_track_offset_within_chunk
						math pcm_language_track_offset_within_chunk + pcm_chunksize_per_language
					next language
					math ac3_language_track_offset_within_chunk = pcm_language_track_offset_within_chunk
					for language = 0 < 2
						xmath language2 "language + 1"
						string ac3_name p "%s[%02d].ac3" NAME language2
						putarray 2 language ac3_name
						putarray 4 language ac3_language_track_offset_within_chunk
						math ac3_language_track_offset_within_chunk + ac3_chunksize_per_language
					next language
					for language = 0 < 2
						getarray pcm_name 1 language
						getarray ac3_name 2 language
						getarray pcm_language_track_offset_within_chunk 3 language
						getarray ac3_language_track_offset_within_chunk 4 language
						log pcm_name pcm_language_track_offset_within_chunk pcm_chunksize_per_language MEMORY_FILE
						math ac3_actual_chunksize = ac3_chunksize_per_language
						xmath ac3_last_offset "(ac3_language_track_offset_within_chunk + ac3_chunksize_per_language) - 8"
						for
							goto ac3_last_offset MEMORY_FILE
							get zero_byte_01 long MEMORY_FILE
							get zero_byte_02 long MEMORY_FILE
							if zero_byte_02 = 0
								math ac3_actual_chunksize - 4
							else
								break
							endif
							if zero_byte_01 = 0
								math ac3_actual_chunksize - 4
							else
								break
							endif
							math ac3_last_offset - 8
						next
						log ac3_name ac3_language_track_offset_within_chunk ac3_actual_chunksize MEMORY_FILE
					next language
				endif
				append
			endif
		elif sound_type = 2
			append
			string pcm_name p "%s.adpcm" NAME
			log pcm_name raw_track_offset_within_chunk chunk_track_info_02 MEMORY_FILE
			if chunk_track_info_04 != 0
				xmath ac3_offset "(chunk_track_info_03 - chunk_track_info_04) + raw_track_offset_within_chunk"
				string ac3_name p "%s.ac3" NAME
				log ac3_name ac3_offset chunk_track_info_04 MEMORY_FILE
			endif
			append
		elif sound_type = 3
			log MEMORY_FILE2 raw_track_offset_within_chunk chunk_track_info_03 MEMORY_FILE
			callfunction process_compressed_audio_chunk 1
			append
			if decompressed_size == chunk_track_info_02
				string pcm_name p "%s.adpcm" NAME
				log pcm_name 0 chunk_track_info_02 MEMORY_FILE3
				log MEMORY_FILE3 0 0
				if chunk_track_info_04 != 0
					xmath ac3_offset "(chunk_track_info_03 - chunk_track_info_04) + raw_track_offset_within_chunk"
					string ac3_name p "%s.ac3" NAME
					log ac3_name ac3_offset chunk_track_info_04 MEMORY_FILE
				endif
			endif
			append
		endif
	endfunction
	
	startfunction process_compressed_audio_chunk
		get compression_level byte MEMORY_FILE2
		if compression_level >= 1 && compression_level <= 2
		endif
		get original_size long MEMORY_FILE2
		log MEMORY_FILE3 0 0
		math bytes_written = 0
		xmath full_size "chunk_track_info_03 - chunk_track_info_04"
		do
			get control_byte byte MEMORY_FILE2
			if control_byte <= 0x7d
				for j = 0 < control_byte
					goto bytes_written MEMORY_FILE3
					get bytes_to_write byte MEMORY_FILE2
					put bytes_to_write byte MEMORY_FILE3
					math bytes_written + 1
				next j
			elif control_byte == 0x7e
				get bytes_to_write byte MEMORY_FILE2
				math bytes_to_write + 4
				get source_byte_to_write byte MEMORY_FILE2
				for j = 0 < bytes_to_write
					goto bytes_written MEMORY_FILE3
					put source_byte_to_write byte MEMORY_FILE3
					math bytes_written + 1
				next j
			elif control_byte == 0x7f
				get bytes_to_write short MEMORY_FILE2
				get source_byte_to_write byte MEMORY_FILE2
				for j = 0 < bytes_to_write
					goto bytes_written MEMORY_FILE3
					put source_byte_to_write byte MEMORY_FILE3
					math bytes_written + 1
				next j
			elif control_byte >= 0x80
				xmath additional_control_byte_01 "((control_byte & 0x7f) >> 3) + 3"
				if compression_level == 2
					if additional_control_byte_01 >= 5
						xmath additional_control_byte_03 "((additional_control_byte_01 - 5) >> 1) + 1"
						math additional_control_byte_01 - additional_control_byte_03
					endif
				endif
				if compression_level == 1
					xmath additional_control_byte_02 "control_byte & 0x07"
				elif compression_level == 2
					xmath additional_control_byte_02 "control_byte & 0x0f"
				endif
				if additional_control_byte_02 >= 0x08
					math additional_control_byte_01 - 1
				endif
				get previous_bytes byte MEMORY_FILE2
				if additional_control_byte_02 == 0
					xmath byte_recovery_position "(bytes_written - previous_bytes) - 1"
				else
					xmath byte_recovery_position "(bytes_written - previous_bytes) - ((additional_control_byte_02 << 8) + 1)"
				endif
				for j = 0 < additional_control_byte_01
					if byte_recovery_position >= 0
						goto byte_recovery_position MEMORY_FILE3
						get recurring_bytes byte MEMORY_FILE3
					else
						math recurring_bytes = 0
					endif
					goto bytes_written MEMORY_FILE3
					put recurring_bytes byte MEMORY_FILE3
					math bytes_written + 1
					math byte_recovery_position + 1
				next j
			endif
			savepos current_position MEMORY_FILE2
		while current_position < full_size
		get decompressed_size asize MEMORY_FILE3
		log MEMORY_FILE2 0 0
	endfunction
else
	# "single" .DAT movies
	# ---
	putarray 101 0x00 0x00
	putarray 101 0x01 0x00
	putarray 101 0x02 0x00
	putarray 101 0x03 0x00
	putarray 101 0x04 0x00
	putarray 101 0x05 0x00
	putarray 101 0x06 0x00
	putarray 101 0x07 0x00
	putarray 101 0x08 0x00
	putarray 101 0x09 0x00
	putarray 101 0x0a 0x00
	putarray 101 0x0b 0x00
	putarray 101 0x0c 0x00
	putarray 101 0x0d 0x00
	putarray 101 0x0e 0x00
	putarray 101 0x0f 0x00
	# ---
	get single_dat_type long
	if single_dat_type == 0
		get dat_02 byte
		get dat_03 byte
		get dat_04 short
		get total_frames long
		get height short
		get width short
		get dat_08 long
		get dat_09 long
		get dat_10 long
		get dat_11 long
		if dat_03 == 0xff
			get dat_12 long
		endif
		savepos chunk_position
		xmath total_macroblocks "(height / 16) * (width / 16)"
		putarray 0 0 total_macroblocks
		log MEMORY_FILE2 0 0
		do
			goto chunk_position
			if dat_03 == 0xff
				get chunk_size long
				get frames_within_chunk long
				savepos raw_video_frame_offset
				log MEMORY_FILE raw_video_frame_offset chunk_size
				goto 0 MEMORY_FILE
				for f = 0 < frames_within_chunk
					get flag byte MEMORY_FILE
					for mb = 0 < total_macroblocks
					next mb
				next f
				math chunk_position + chunk_size
				math chunk_position + 8
			endif
			if dat_03 == 0x01
				get chunk_size_01 long
				get chunk_size_02 long
				get chunk_number long
				get chunk_04 long
				math chunk_position + chunk_size_02
				math chunk_position + 16
			endif
		while chunk_position < DAT_SIZE
	endif

	if single_dat_type == 1
		get dat_02 long
		get video_height short
		get video_width short
		get total_number_of_chunks long
		get dat_06 long
		get dat_07 long
		get dat_08 long
		get dat_09 long
		savepos chunk_position
		do
			goto chunk_position
			if chunk_position == 0x20
				get chunk_track_number long
				get chunk_size_per_track long
				get chunk_02 long
				get chunk_03 long
				if chunk_track_number == 2
					savepos chunk_offset_per_track
					log MEMORY_FILE chunk_offset_per_track chunk_size_per_track
					for i = 0 < total_number_of_chunks
						get chunk_offset long MEMORY_FILE
						xmath full_chunk_offset "chunk_offset + (chunk_size_per_track + 0x30)"
						get next_chunk_offset long MEMORY_FILE
						goto -4 MEMORY_FILE SEEK_CUR
						xmath full_chunk_size "next_chunk_offset - chunk_offset"
						putarray 1 i full_chunk_offset
						putarray 2 i full_chunk_size
					next i
				endif
				math chunk_position + chunk_size_per_track
				log MEMORY_FILE 0 0
				log MEMORY_FILE2 0 0
			else
				xmath total_macroblocks "(height / 16) * (width / 16)"
				putarray 0 0 total_macroblocks
				for i = 0 < total_number_of_chunks
					getarray full_chunk_offset 1 i
					getarray full_chunk_size 2 i
					log MEMORY_FILE full_chunk_offset full_chunk_size
					math chunk_position_on_memory = 0
					do
						goto chunk_position_on_memory MEMORY_FILE
						get chunk_track_number long MEMORY_FILE
						if chunk_track_number == 3
							get height short MEMORY_FILE
							get width short MEMORY_FILE
							get chunk_track_size long MEMORY_FILE
							get mpeg2_04 long MEMORY_FILE
						else
							get chunk_track_size long MEMORY_FILE
							get chunk_track_sub_number long MEMORY_FILE
							get chunk_track_04 long MEMORY_FILE
						endif
						savepos chunk_offset_per_track MEMORY_FILE
						callfunction extract_chunk 1
						math chunk_position_on_memory + 16
						math chunk_position_on_memory + chunk_track_size
					while chunk_position_on_memory < full_chunk_size
					math chunk_position = full_chunk_offset
					log MEMORY_FILE 0 0
				next i
				break
			endif
			math chunk_position + 16
		while chunk_position < DAT_SIZE
	endif

	if single_dat_type == 5
		get dat_02 long
		get dat_03 long
		get dat_04 long
		get dat_05 long
		get dat_06 long
		get dat_07 long
		get dat_08 long
		savepos chunk_position
		math chunks = 0
		do
			goto chunk_position
			get chunk_track_number long
			math chunks + 1
			if chunk_track_number == 3
				get height short
				get width short
				get chunk_track_size long
				get mpeg2_04 long
			else
				get chunk_track_size long
				get chunk_track_sub_number long
				get chunk_track_actual_size long
			endif
			get padding_01 long
			get padding_02 long
			get padding_03 long
			get padding_04 long
			savepos chunk_offset_per_track
			callfunction extract_chunk 1
			math chunk_position + 32
			if chunk_track_number == 1
				math chunk_track_size = 0
			elif chunk_track_number == 6
				math chunk_track_size = 0
			endif
			math chunk_position + chunk_track_size
		while chunk_position < DAT_SIZE
	endif
endif

startfunction extract_chunk
	# single .dat movie files like to do things differently
	append
	if chunk_track_number == 4
		if chunk_track_sub_number == 0xffffff00
			string chunk_name p "%s.pcm" NAME
		elif chunk_track_sub_number == 0xffffff01
			string chunk_name p "%s.ac3" NAME
		elif chunk_track_sub_number == 0xffffff02
			string chunk_name p "%s.adpcm" NAME
		elif chunk_track_sub_number == 0xffffff03
			string chunk_name p "%s.vsf" NAME
		endif
		if single_dat_type == 1
			log chunk_name chunk_offset_per_track chunk_track_size MEMORY_FILE
		elif single_dat_type == 5
			log chunk_name chunk_offset_per_track chunk_track_actual_size
		endif
	endif
	append
endfunction
