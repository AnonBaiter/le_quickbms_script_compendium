# Ubisoft - BIG/BUG(*.bf/*.bf#/*.###)
# ---
# Beyond Good and Evil
# Prince of Persia: The Sands of Time
# Prince of Persia: Warrior Within
# Peter Jackson's King Kong: The Official Game of the Movie
# Prince of Persia: The Two Thrones
# TMNT
# My Word Coach
# (possibly others that use this format)

math 32bit_max_number = 0xffffffff

get bf_size asize
get bf_name basename
get bf_ext extension

# list of games who use split bf
# Beyond Good and Evil (Xbox) - .bf#
# Peter Jackson's King Kong: The Official Game of the Movie (Xbox) - .###(starts with 001)

endian little

get bf_01 long
xmath bf_01_01 "(bf_01 & 0xff) << 24 | (bf_01 & 0xff00) << 8 | (bf_01 & 0xff0000) >> 8 | (bf_01 & 0xff000000) >> 24"
xmath bigfile_sign "(bf_01_01 >> 8) & 0xffffff"
xmath bigfile_extra_byte "bf_01_01 & 0xff"
math entry_info_size = 0
if bigfile_sign == 0x424947 # "BIG"
	log MEMORY_FILE 4 0x28 # put initial header data into memory
	math file_number = -1
	math entry_info_size_01 = 0x54
	math entry_info_size_02 = 0x54
	callfunction read_bigfile_header 1
elif bigfile_sign == 0x425547 # "BUG"
	math entry_info_size_01 = 0x58
	math entry_info_size_02 = 0x54
	callfunction decrypt_bigfile_header 1
endif

startfunction read_bigfile_header
	get version long file_number
	if version == 0x2a
		math entry_info_size_01 + 0x28
	endif
	get files1 long file_number
	get folders1 long file_number
	get bf_05 long file_number
	get bf_06 long file_number
	get bf_07 long file_number
	get bf_08 long file_number
	get skips1 long file_number
	get file_indices long file_number
	get flagship_file long file_number
	math file_index_header_size = 0x18
	goto 0x2c
	putvarchr MEMORY_FILE2 file_index_header_size 0
	xmath passes "file_index_header_size / 4"
	math file_number = -2
	callfunction decrypt_block 1
	goto 0 file_number
	for i = 0 < file_indices
		log MEMORY_FILE3 0 0
		log MEMORY_FILE4 0 0
		log MEMORY_FILE5 0 0
		get files2 long file_number
		get folders2 long file_number
		get file_listing_offset long file_number
		get next_listing_offset long file_number
		get bf_16 long file_number
		get skips2 long file_number
		xmath file_listing_size "files2 * 8"
		xmath file_tab_offset "file_listing_offset + (skips1 * 8)"
		xmath file_tab_size "files2 * entry_info_size_01"
		xmath folder_tab_offset "file_tab_offset + (skips1 * entry_info_size_01)"
		xmath folder_tab_size "folders2 * entry_info_size_02"
		if bigfile_sign == 0x424947
			log MEMORY_FILE3 file_listing_offset file_listing_size
			math file_number = -3
			callfunction initialize_file_listing 1
			log MEMORY_FILE4 file_tab_offset file_tab_size
			math file_number = -4
			callfunction parse_file_tabs 1
			log MEMORY_FILE5 folder_tab_offset folder_tab_size
			math file_number = -5
			callfunction parse_folder_tabs 1
		elif bigfile_sign == 0x425547
			goto file_listing_offset
			putvarchr MEMORY_FILE3 file_listing_size 0
			xmath passes "files2 * 4"
			math file_number = -3
			callfunction decrypt_block 1
			goto 0 file_number
			callfunction initialize_file_listing 1
			goto file_tab_offset
			putvarchr MEMORY_FILE4 file_tab_size 0
			math file_number = -4
			xmath passes "file_tab_size / 4"
			callfunction decrypt_block 1
			goto 0 file_number
			callfunction parse_file_tabs 1
			goto folder_tab_offset
			putvarchr MEMORY_FILE5 folder_tab_size putvarchr
			math file_number = -5
			xmath passes "folder_tab_size / 4"
			callfunction decrypt_block 1
			goto 0 file_number
			callfunction parse_folder_tabs 1
		endif
		callfunction final_step 1
		if next_listing_offset != 32bit_max_number
			math next_listing_offset - file_index_header_size
			goto next_listing_offset
			putvarchr MEMORY_FILE2 file_index_header_size 0
			xmath passes "file_index_header_size / 4"
			math file_number = -2
			callfunction decrypt_block 1
			goto 0 file_number
		endif
	next i
endfunction

startfunction initialize_file_listing
	for i1 = 0 < files2
		get file_01 long file_number
		putarray 0 i1 file_01
		get file_02 long file_number
		putarray 1 i1 file_02
	next i1
endfunction

startfunction parse_file_tabs
	for i1 = 0 < files2
		get file_03 long file_number
		putarray 2 i1 file_03
		get file_04 long file_number
		putarray 3 i1 file_04
		get file_05 long file_number
		putarray 4 i1 file_05
		get file_06 long file_number
		putarray 5 i1 file_06
		get file_07 time file_number
		putarray 6 i1 file_07
		callfunction fetch_entry_name 1
		set file_08 string entry_name
		putarray 7 i1 file_08
		if version == 0x24
			get file_09 long file_number
			putarray 8 i1 file_09
		endif
		if version == 0x2a
			get file_09 long file_number
			putarray 8 i1 file_09
			getdstring file_10 0x20 file_number
			putarray 9 i1 file_10
			get file_10 long file_number
			putarray 10 i1 file_09
		endif
	next i1
endfunction

startfunction parse_folder_tabs
	for i2 = 0 < folders2
		get folder_01 long file_number
		putarray 32 i2 folder_01
		get folder_02 long file_number
		putarray 33 i2 folder_02
		get folder_03 long file_number
		putarray 34 i2 folder_03
		get folder_04 long file_number
		putarray 35 i2 folder_04
		get folder_05 long file_number
		putarray 36 i2 folder_05
		callfunction fetch_entry_name 1
		set folder_06 string entry_name
		putarray 37 i2 folder_06
	next i2
endfunction

startfunction final_step
	for i2 = 0 < folders2
		set full_folder_name string ""
		getarray folder_01 32 i2
		getarray next_folder 33 i2
		getarray next_neighbor_folder 34 i2
		getarray previous_neighbor_folder 35 i2
		getarray previous_folder 36 i2
		getarray folder_name 37 i2
		math keyword_number = 0
		putarray 64 keyword_number folder_name
		math keyword_number + 1
		if previous_folder != 32bit_max_number
			for
				getarray previous_folder 36 previous_folder
				getarray folder_name 37 previous_folder
				putarray 64 keyword_number folder_name
				math keyword_number + 1
				if previous_folder == 0
					break
				endif
			next
		endif
		math max_names_for_this_folder = keyword_number
		xmath name_startoff "keyword_number - 1"
		for nk = 0 < max_names_for_this_folder
			getarray folder_name 64 name_startoff
			math name_startoff - 1
			string full_folder_name + folder_name
			string full_folder_name + "/"
		next nk
		putarray 38 i2 full_folder_name
	next i2

	for i1 = 0 < files2
		set full_file_name string ""
		getarray file_offset 0 i1
		getarray file_name_hash 1 i1
		getarray file_size 2 i1
		getarray next_neighbor_file 3 i1
		getarray previous_neighbor_file 4 i1
		getarray folder_number 5 i1
		getarray full_folder_name 38 folder_number
		getarray file_time_record 6 i1
		getarray file_name 7 i1
		if version == 0x24
			getarray file_09 8 i1
		endif
		if version == 0x2a
			getarray file_09 8 i1
			getarray file_sha1 9 i1
			getarray file_11 10 i1
		endif
		string full_file_name + full_folder_name
		string full_file_name + file_name
		putarray 11 i1 full_file_name
		goto file_offset
		get real_file_size long
		savepos real_file_offset
		log full_file_name real_file_offset real_file_size
	next i1
endfunction

startfunction decrypt_bigfile_header
	goto 0x10
	get key long
	goto 4
	log MEMORY_FILE 4 0x28
	xmath passes "0x28 / 4"
	math file_number = -1
	callfunction decrypt_block 1
	goto 0 file_number
	callfunction read_bigfile_header 1
endfunction

startfunction decrypt_block
	for pass = 0 < passes
		get target long
		xmath decoded "target ^ key"
		put decoded long file_number
	next pass
endfunction

startfunction fetch_entry_name
	getdstring entry_name 0x40 file_number
endfunction
