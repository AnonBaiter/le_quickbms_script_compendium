# Ubisoft Reflections - *.img/*.L##
# ---
# Stuntman (PS2)
# Driv3r (PS2, Xbox)
# Driver: Parallel Lines (PS2, Xbox)

math external = 0
get img_name basename
get img_size asize
get img_sign long
get img_files long
get hardcoded_file_info_hash long
math initial_file_info_position = 0
math img_ver = 0
if img_sign == 0x32474d49 # IMG2 (Stuntman, from second demo release to final USA release)
	xmath img_archive_info_size "img_files * 0x38"
	math initial_file_info_position = 0x0c
	math img_ver = 1
elif img_sign == 0x33474d49 # IMG3 (Stuntman, final Europe release only)
	get img_archive_info_size long
	math initial_file_info_position = 0x10
	math img_ver = 2
elif img_sign == 0x34474d49 # IMG4 (starting with Driv3r)
	get img_archive_info_size long
	math initial_file_info_position = 0x10
	math img_ver = 3
endif
xmath img_is_xbox "(((img_archive_info_size + initial_file_info_position) >> 11) + 1) << 11"
# (todo) this is too rough for my tastes
if img_size = img_is_xbox
	math external = 1
endif

goto initial_file_info_position
if img_ver = 1
	math init_hash_number = 0x2eaa508
	for i = 0 < img_archive_info_size
		get byte_to_calc byte
		math init_hash_number + byte_to_calc
	next i
else
	/*
	math init_hash_number = 0
	for i = 0 < img_archive_info_size
		get byte_to_calc byte
		math init_hash_number + byte_to_calc
	next i
	putarray 0 0 init_hash_number
	*/
endif
/*
math final_hash_number = init_hash_number
if final_hash_number != hardcoded_file_info_hash
	break
endif
*/
goto initial_file_info_position
log MEMORY_FILE 0 img_archive_info_size
if img_ver = 1
	math init_dec_number = 0x1b
	for i = 0 < img_archive_info_size
		get enc_byte byte
		math enc_byte - init_dec_number
		put enc_byte byte MEMORY_FILE
		math init_dec_number + 0x0b
		math init_dec_number & 0xff
	next i
	goto 0 MEMORY_FILE
	for i = 0 < img_files
		getdstring file_name 0x30 MEMORY_FILE
		get file_offset long MEMORY_FILE
		get file_size long MEMORY_FILE
		if img_size <= 0xffefffff
			math file_offset << 11
			log file_name file_offset file_size
		elif img_size == 0xfff00000
			callfunction special_file_handle_within_split_img_files 1
		endif
	next i
elif img_ver >= 2
	math init_number_01 = 0x1b
	math init_number_02 = 0
	for i = 0 < img_archive_info_size
		get enc_byte byte
		xmath first_step "init_number_02 & 0x1f"
		math enc_byte - init_number_01
		put enc_byte byte MEMORY_FILE
		if first_step >= 7
			math init_number_01 + 0x0b
		else
			math init_number_01 + 0x15
		endif
		math init_number_01 & 0xff
		math init_number_02 + 1
	next i
	goto 0 MEMORY_FILE
	for i = 0 < img_files
		if img_ver = 2
			get file_name_offset long MEMORY_FILE
			savepos img_temp_position MEMORY_FILE
			goto file_name_offset MEMORY_FILE
			get file_name string MEMORY_FILE
			goto img_temp_position MEMORY_FILE
			get file_offset long MEMORY_FILE
			get file_size long MEMORY_FILE
			if img_size <= 0xffefffff
				math file_offset << 11
				log file_name file_offset file_size
			elif img_size == 0xfff00000
				callfunction special_file_handle_within_split_img_files 1
			endif
		elif img_ver = 3
			get hardcoded_file_name_hash long MEMORY_FILE
			get file_02 long MEMORY_FILE
			get file_size long MEMORY_FILE
			string temp_name p "%08x" hardcoded_file_name_hash
			if external = 0
				if img_size <= 0xffefffff
					xmath file_offset "file_02 << 11"
					log temp_name file_offset file_size
				elif img_size == 0xfff00000
					callfunction special_file_handle_within_split_img_files 1
				endif
			elif external = 1
				xmath file_offset "((file_02 >> 8) & 0xffffff) << 11"
				xmath img_layer_number_01 "(file_02 >> 4) & 0x0f"
				xmath img_layer_number_02 "file_02 & 0x0f"
				string img_layer_name p "%s.L%d%d" img_name img_layer_number_01 img_layer_number_02
				open FDSE img_layer_name 1
				log temp_name file_offset file_size 1
			endif
		endif
	next i
endif

startfunction special_file_handle_within_split_img_files
	xmath img_reduced_size "0xfff00000 >> 11"
	if img_ver = 3
		math file_offset == file_02
	endif
	xmath img_number "file_offset / img_reduced_size"
	if img_number == 0
		string img_layer_name p "%s.img" img_name
	else
		math img_number - 1
		string img_layer_name p "%s.im%d" img_name img_number
	endif
	open FDSE img_layer_name 1
	xmath file_offset_per_layer "(file_offset % img_reduced_size) << 11"
	xmath test_01 "(file_offset_per_layer >> 11) + (file_size >> 11)"
	xmath total_number_of_chunks_per_file_within_split_archive "((file_offset_per_layer >> 11) + (file_size >> 11)) / img_reduced_size"
	if total_number_of_chunks_per_file_within_split_archive == 0
		if img_ver <= 2
			log file_name file_offset_per_layer file_size 1
		elif img_ver = 3
			log temp_name file_offset_per_layer file_size 1
		endif
	else
		math last_j = total_number_of_chunks_per_file_within_split_archive
		math current_img_layer = img_number
		append
		for j = 0 <= total_number_of_chunks_per_file_within_split_archive
			math chunked_file_offset_within_split_archive = 0
			math chunked_file_size_within_split_archive = 0
			if current_img_layer == 0
				string temp_load p "%s.img" img_name
			else
				math alternative_img_layer = current_img_layer
				math alternative_img_layer - 1
				string temp_load p "%s.im%d" img_name alternative_img_layer
			endif
			open FDSE temp_load 2
			if j = 0
				math chunked_file_offset_within_split_archive = file_offset_per_layer
				xmath chunked_file_size_within_split_archive "(((test_01 - ((total_number_of_chunks_per_file_within_split_archive - 1) * img_reduced_size)) - (test_01 - ((total_number_of_chunks_per_file_within_split_archive) * img_reduced_size))) - (file_offset_per_layer >> 11)) << 11"
			elif j = last_j
				xmath chunked_file_size_within_split_archive "((test_01 - ((total_number_of_chunks_per_file_within_split_archive) * img_reduced_size)) << 11) + (file_size % (1 << 11))"
			else
				math chunked_file_size_within_split_archive = img_size
			endif
			if img_ver <= 2
				log file_name chunked_file_offset_within_split_archive chunked_file_size_within_split_archive 2
			elif img_ver = 3
				log temp_name chunked_file_offset_within_split_archive chunked_file_size_within_split_archive 2
			endif
			math current_img_layer + 1
		next j
		append
	endif
endfunction
