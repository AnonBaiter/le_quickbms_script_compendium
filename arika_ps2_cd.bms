# Arika (PS2) - [ARIKA.DAT]+[PS2.DAT]
# ---
# Street Fighter EX3 (PS2)
# Technictix (PS2)

get elf_name filename
if elf_name == "SLPM_601.05" # Street Fighter EX3 - Trial Version (PlayStation Festival 2000)
	xmath files "0x1a00 / 0x20"
	callfunction handle_arika_dat 1
	goto 0x3fff40
	callfunction txth_handling_for_sfex3 1
elif elf_name == "SLPS_200.03" # Street Fighter EX3 - Final Product (Japan)
	xmath files "0x48c0 / 0x20"
	callfunction handle_arika_dat 1
	goto 0x433790
	callfunction txth_handling_for_sfex3 1
elif elf_name == "SLPM_601.34" # Technictix - Trial Version
	xmath files "0xda0 / 0x20"
	callfunction handle_arika_dat 1
elif elf_name == "SLPS_200.55" # Technictix - Final Product (Japan)
	xmath files "0x2fc0 / 0x20"
	callfunction handle_arika_dat 1
endif

startfunction handle_arika_dat
	open FDSE "ARIKA.DAT" 1
	open FDSE "PS2.DAT" 2
	get arika_dat_size asize 1
	for i = 0 < 0x10
		get k1 byte 1
		xmath k2 "(k1 ^ 0xff) & 0xff"
		putarray 0 i k2
	next i
	math pos_01 = 0x10
	xmath bytes_to_process "(arika_dat_size - 0x10) / 0x10"
	log MEMORY_FILE 0 0
	goto 0 MEMORY_FILE
	for i2 = 0 < bytes_to_process
		for j1 = 0 < 0x10
			goto pos_01 1
			get target byte 1
			xmath d1 "(target & 0xf) << 4 | (target >> 4) & 0x0f"
			getarray key 0 j1
			xmath d2 "(key - d1) & 0xff"
			put d2 byte MEMORY_FILE
			math pos_01 + 1
		next j1
	next i2
	putarray 0 "" ""
	goto 0 1
	getdstring arika_title 0x10 1
	goto 0 MEMORY_FILE
	goto 4 MEMORY_FILE
	get base_cd_sector_for_ps2_dat long MEMORY_FILE
	goto 0x10 MEMORY_FILE
	for i = 0 < files
		getdstring file_name 0x14 MEMORY_FILE
		get file_offset long MEMORY_FILE
		math file_offset - base_cd_sector_for_ps2_dat
		math file_offset << 11
		get file_size_in_cd_sectors long MEMORY_FILE
		get file_size long MEMORY_FILE
		string final_name p "%s\%s" arika_title file_name
		log final_name file_offset file_size 2
	next i
endfunction

# the executable part is just for handling .mus files as used by the game.

startfunction txth_handling_for_sfex3
	xmath mus_entries "0xa8 / 0xc"
	for i = 0 < mus_entries
		get mus_name_offset long
		math mus_name_offset - 0xfff00
		putarray 0 i mus_name_offset
		get num_songs short
		putarray 1 i num_songs
		get mus_size short
		putarray 2 i mus_size
		get mus_04 long
		putarray 3 i mus_04
	next i
	math sample_rate = 0xac44
	math interleave = 0x8000
	math channels = 2
	xmath chunk_size "interleave * channels"
	for i = 0 < mus_entries
		log MEMORY_FILE 0 0
		getarray mus_name_offset 0 i
		goto mus_name_offset
		get mus_name string
		getarray num_songs 1 i
		getarray mus_size 2 i
		getarray mus_04 3 i
		putct "codec = PSX" string -1 MEMORY_FILE
		string txth_l2 p "sample_rate = %d" sample_rate
		put 0x0d byte MEMORY_FILE
		put 0x0a byte MEMORY_FILE
		putct txth_l2 string -1 MEMORY_FILE
		string txth_l3 p "channels = %d" channels
		put 0x0d byte MEMORY_FILE
		put 0x0a byte MEMORY_FILE
		putct txth_l3 string -1 MEMORY_FILE
		string txth_l4 p "interleave = %d" interleave
		put 0x0d byte MEMORY_FILE
		put 0x0a byte MEMORY_FILE
		putct txth_l4 string -1 MEMORY_FILE
		string txth_l5 p "subsong_count = %d" num_songs
		put 0x0d byte MEMORY_FILE
		put 0x0a byte MEMORY_FILE
		putct txth_l5 string -1 MEMORY_FILE
		string txth_l6 p "chunk_start = 0"
		put 0x0d byte MEMORY_FILE
		put 0x0a byte MEMORY_FILE
		putct txth_l6 string -1 MEMORY_FILE
		string txth_l7 p "chunk_size = %d" chunk_size
		put 0x0d byte MEMORY_FILE
		put 0x0a byte MEMORY_FILE
		putct txth_l7 string -1 MEMORY_FILE
		string txth_l8 p "chunk_count = %d" num_songs
		put 0x0d byte MEMORY_FILE
		put 0x0a byte MEMORY_FILE
		putct txth_l8 string -1 MEMORY_FILE
		string txth_l9 p "start_offset = 0"
		put 0x0d byte MEMORY_FILE
		put 0x0a byte MEMORY_FILE
		putct txth_l9 string -1 MEMORY_FILE
		xmath num_samples "mus_size * chunk_size"
		math num_samples / 2
		math num_samples / 16
		math num_samples * 28
		string txth_l10 p "num_samples = %d" num_samples
		put 0x0d byte MEMORY_FILE
		put 0x0a byte MEMORY_FILE
		putct txth_l10 string -1 MEMORY_FILE
		string txth_name p "txth\%s.txth" mus_name
		get txth_size asize MEMORY_FILE
		log txth_name 0 txth_size MEMORY_FILE
	next i
endfunction
